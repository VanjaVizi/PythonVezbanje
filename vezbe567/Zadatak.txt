----- VEZBE 7 ---------

Dopunite klasu Let (sa vežbi 5) na način opisan u nastavku:

Izmeniti sledeće metode klase Let:

- konstruktor (__init__) bi trebalo da primi tri ulazna argumenta za atribute `broj_leta`, `vreme_poletanja` i `ruta`,
  gde je `ruta` novi atribut koji predstavlja rutu leta kao uređeni par oblika (polazište, odredište);
  za atribut `putnici` ostaje da se inicijalizuje kao prazna lista.

- “set” metoda za atribut `vreme_poletanja`, bi trebalo da pravilno obrađuje situacije kada su datum i vreme polaska
  dati kao string u nepoznatom formatu (tj., u formatu koji ne odgovara class atributu `poletanje_dt_format`)

– “get” metodu atributa `vreme_poletanja` bi trebalo napisati u Pythonic stilu, poznatom kao “lakše je tražiti
  oproštaj nego dozvolu“ (easier to ask for forgiveness than permission - EAFP)

- metodu koja vraća string reprezentaciju datog objekta (__str__) bi trebalo proširiti tako da opisuje let
  sa proširenim skupom atributa.

Dodati klasi Let sledeće nove metode:

- “get” i “set” metode (koristeći odgovarajuće dekoratore) za atribut `ruta`. Set metoda bi trebalo da omogući različite
  načine postavljanja rute leta, odnosno trebalo bi omogućiti postavljanje vrednosti atributa za ulazni argument dat u
  formi liste ili tapla (od dva elementa) ili stringa sa polaznom i odredišnom lokacijom odvojenim zarezom
  (“Beograd, Rim”), crticom (“Beograd - Rim”) ili znakom '>' (“Beograd > Roma”).
  Savet: metoda `split` iz modula `re` može biti korisna za ovaj zahtev.

- class metoda `from_dict` za kreiranje objekta klase Let (alternativni konstruktor) na osnovu podataka o letu koji
  su dati kao rečnik (jedini ulazni argument) sa sledećim ključevima: `br_leta`, `vreme_poletanja`, `polazna_lokacija`,
  `odrediste`.
  Potrebno je uzeti u obzir da rečnik možda ne sadrži sve očekivane podatke, odnosno da se neki ključevi rečnika možda
  neće podudarati sa prethodno navedenim nazivima; u tom slučaju, metoda ispisuje ključeve koji su dostupni i kreira
  instancu Let klase sa dostupnim podacima.

- generatorska metoda koja generiše sekvencu putnika koji su naručili dodatne usluge na letu. Metoda takođe ispisuje,
  za svaku naručenu uslugu, koliko putnika je naručilo tu uslugu.

- generatorska metoda koja generiše sekvencu putnika koji su kandidati za prelazak u biznis klasu; to su putnici
  ekonomske klase čija cena avionske karte prelazi zadati prag (ulazni argument) i koji su se prijavili za najmanje
  jednu uslugu na letu. Pri generisanju sekvence kandidata (putnika) trebalo bi uzeti u obzir cenu avionske karte,
  tako da oni putnici koji su platili višu cenu imaju prioritet za prelazak u biznis klasu.


----- VEZBE 6 ---------


*Enumeracija UslugaNaLetu*

Kreirati enumeraciju `UslugaNaLetu` čije instance predstavljaju različite vrste usluga
koje se mogu ponuditi putnicima (npr., izbor sedista, obrok, wifi, osiguranje leta, prioritetno ukrcavanje).

U okviru ove enumeracije, potrebno je kreirati:

- static metodu `valid_service_str` koja za zadati ulazni string proverava da li predstavlja
  naziv ili vrednost neke od UslugaNaLetu instanci i vraća True ako je to slučaj, odnosno False
  ako uneti string ne odgovara nazivu ili vrednosti ni jedne instance. Poređenje stringova treba
  da bude case insensitive.

- static metodu `get_service_from_str` koja za zadati ulazni string vraća UslugaNaLetu instancu
  čiji naziv ili vrednost odgovaraju tom stringu; ako ulazni string ne odgovara ni jednoj instanci,
  metoda vraća None. Poređenje stringova treba da bude case insensitive.


*Klasa Putnik*

Dopunite klasu Putnik (sa vezbi 5) na sledeći način:

Pored postojećih atributa, klasa treba da ima i sledeće atribute:
- `cena_karte` - cena koju je putnik platio za let
- `usluge` - atribut predstavlja listu usluga koje su dostupne putniku; lista je inicijalno prazna;
   elementi ove liste bi trebalo da budu instance enumeracije UslugaNaLetu.

Sledeće metode klase Putnik je potrebno dopuniti na način opisan u nastavku:

- konstruktor (__init__) - prima 5 ulaznih argumenata, po jedan za svaki atribut osim atributa `usluge`.
  Atribut `usluge` treba da bude inicijalizovan na praznu listu.

– Get metodu za atribut `pasos` je potrebno napisati u Pythonic stilu, poznatom kao „lakše je tražiti oproštaj nego dozvolu“
  (easier to ask for forgiveness than permission - EAFP)

- Metoda koja vraća string reprezentaciju objekta klase Putnik (__str__) tako da opisuje putnika sa proširenim skupom atributa.

Na kraju, potrebno je dodati get i set metode (koristeći odgovarajuće dekoratere) za atribut `cena_karte`;
atribut treba učiniti privatnim; u okviru set metode bi trebalo obezbediti:
  i) dodelu pozitivne int vrednosti ovom atributu, i
  ii) mogućnost postavljanja vrednosti na osnovu float, int, ili string zapisa novčanog iznosa


*Klasa PutnikEkonomskeKlase*

Kreirajte klasu PutnikEkonomskeKlase koja nasleđuje klasu Putnik i ima:

- Metodu `dodaj_izabrane_usluge` koja prima rečnik čiji ključevi su usluge koje je putnik kupio (kao instance enumeracije
  UslugaNaLetu), dok su vrednosti cene tih usluga. Usluge treba dodati u listu `usluge` putnika, a cene koristiti za
  uvećanje vrednosti atributa `cena_karte`, ALI samo ako je osnovna cena karte plaćena, odnosno ako atribut `cena_karte`
  ima dodeljenu vrednost; u suprotnom, metoda baca ValueError izuzetak sa odgovarajucom porukom. Metoda takođe treba
  da kreira i prikaže “izveštaj” o dodatnim uslugama i rezultirajućem povećanju cene avionske karte.

- Izmenjenu __str__ metodu tako da se prvo ispisuje "Putnik ekonomske klase", a zatim dostupni podaci o putniku.


*Klasa PutnikBiznisKlase*

Kreirajte klasu PutnikBiznisKlase koja nasleđuje klasu Putnik i ima:

- Konstruktor (__init__) koji prima iste argumente kao i konstruktor nadređene klase plus argument za usluge koje treba dodati
  atributu `usluge`. Ovaj dodatni argument bi trebalo da bude uređena n-torka stringova (imena usluga) ili instanci enumeracije
  UslugaNaLetu, pri čemu je podrazumevana vrednost UslugaNaLetu.BRZO_UKRCAVANJE. Metoda treba da proveri validnost svakog
  elementa uređene n-torke pre nego što ga doda u listu `usluge`.
  Napomena: konstruktor treba da bude napisan na način koji čini klasu spremnom za višestruko nasleđivanje.

- Izmenjenu metodu __str__ tako da prvo ispisuje “Putnik poslovne klase“, a zatim dostupni podaci o putniku.

----- VEZBE 5 ---------

Kreirajte klasu `Putnik` sa sledećim metodama:

* Konstruktor (__init__) koji prima četiri argumenta za inicijalizaciju sledeća 4 atributa:
    * `ime` - ime i prezime putnika
    * `drzava` - zemlja porekla putnika
    * `pasos` - broj pasoša putnika
    * `COVID_bezbedan` - boolean atribut koji ima vrednost True ako je putnik vakcinisan
      ili je nedavno testiran negativno; podrazumevana vrednost ulaznog argumenta je False

* Get i set metode za atribut `pasos` (koristeći odgovarajuće dekoratore); obezbediti da atribut
  bude privatni i da bude string dužine 6, koji se sastoji samo od cifara.

* Metoda koja vraća string reprezentaciju objekta klase `Putnik` (__str__)

* Metoda `azuriraj_COVID_bezbedan` koja postavlja vrednost atributa `COVID_bezbedan` na osnovu ulaznih parametara:
  * `tip_uverenja`: string koji treba da bude ili 'vakcinacija' ili 'negativan_test' (malo/veliko slovo nije bitno)
  * `datum_uverenja`: datum vakcinacije / PCR testa, kao vrednost tipa datetime;
  ako je ulazni argument dat kao string,
  očekuje se da bude u sledećem formatu: %d/%m/%Y
  Metoda postavlja `COVID_bezbedan` atribut na True ako je:
  * (poslednja) vakcinacija bila u poslednjih 365 dana ILI
  * negativan test bio pre manje od 3 dana
  Napomena: za formate datuma pogledajte tabelu:
  https://docs.python.org/3/library/datetime.html#strftime-and-strptime-format-codes

* Class metoda `covid_bezbedan_Francuz` za kreiranje putnika iz Francuske koji je COVID bezbedan
(alternativni konstruktor); metoda prima ime i broj pasoša putnika.

* Metoda koja proverava jednakost datog objekta klase `Putnik` i drugog objekta koji se prosleđuje metodi kao
ulazni parametar (__eq__); dva putnika se smatraju jednakim ako su iz iste zemlje i imaju isti broj pasoša.

Kreirajte klasu `Let` sa sledećim elementima:

* Class atribut `poletanje_dt_format` koji predstavlja očekivani format za datum i vreme poletanja;
  vrednost atributa je "%Y-%m-%d %H:%M"

* Konstruktor (__init__) koji prima dva parametra i koristi ih za inicijalizaciju atributa:
  `broj_leta` i `vreme_poletanja`; takođe inicijalizuje atribut `putnici` kao listu objekata klase `Putnik`
  (inicijalno prazna)

* Get i set metode za atribut `vreme_poletanja` (koristeći odgovarajuće dekoratore);
  obezbediti da atribut bude privatni i da bude objekat datetime klase koji se odnosi na neki budući
  vremenski trenutak; ako je ulazni argument tipa string, on mora biti u formatu `poletanje_dt_format`

* Metoda za dodavanje putnika u listu `putnici`; metoda dodaje novog putnika samo ako je
  ulazni argument objekat klase `Putnik`, ako taj putnik nije već u listi putnika i ako je COVID bezbedan

* Metoda koja vraća string reprezentaciju objekata date klase tj klase `Let` (__str__)

* Metoda koja vraća preostalo vreme do polaska kao triplet oblika (dani, sati, minuti)

* Metode za pretvaranje datog objekta klase `Let` u iterator (__iter__, __next__) kroz putnike na letu
  (tj. elemente liste `putnici`)